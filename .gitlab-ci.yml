stages:
  - build
  - deploy

build:latex:
  stage: build
  image: kjarosh/latex:2023.1
  needs: []
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "*.tex"
        - "*.cls"
        - Makefile
        - scripts/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "*.tex"
        - "*.cls"
        - Makefile
        - scripts/*
  before_script:
    - apk add make
    - apk add git
  script:
    - make clean
    - make --keep-going all || echo "failure"
  artifacts:
    name: latex-artifacts
    paths:
      - ./build/*.pdf
  cache:
    key: "$CI_COMMIT_REF_SLUG-latex-artifacts"
    paths:
      - ./build/*.pdf
    policy: push

build:typst:
  stage: build
  image: ghcr.io/typst/typst:latest
  needs: []
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apk add make
    - apk add git
    - apk add bash
  script:
    - make typst
  artifacts:
    name: typst-artifacts
    paths:
      - ./build/*.pdf

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build:latex
      optional: true
    - job: build:typst
      optional: true
  image: gcr.io/google.com/cloudsdktool/google-cloud-cli:alpine
  before_script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        apk add --no-cache curl jq;
        PROJECT_ID=$(echo $CI_PROJECT_ID);
        PIPELINE_ID=$(curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/$PROJECT_ID/pipelines?ref=$CI_COMMIT_REF_NAME&status=success" | jq -r ".[0].id");
        JOB_ID=$(curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/$PROJECT_ID/pipelines/$PIPELINE_ID/jobs?scope=success" | jq -r '.[] | select(.name=="build:latex") | .id');
        if [ ! -z "$JOB_ID" ]; then
          curl --location --output artifacts.zip --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/$PROJECT_ID/jobs/$JOB_ID/artifacts";
          unzip -o artifacts.zip -d build/;
        fi;
      fi'
  script:
    - gcloud --quiet components update

    - echo $GCP_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID

    # Check for cached latex artifacts and copy them to the working directory if they exist
    - "if [ -d cache/$CI_COMMIT_REF_SLUG-latex-artifacts ]; then cp -r cache/$CI_COMMIT_REF_SLUG-latex-artifacts/* build/; fi"
    # clear bucket and then upload files
    - gsutil rm -a $GCP_BUCKET_URL/**
    - gcloud storage cp --cache-control="public, max-age=3600" metadata.json $GCP_BUCKET_URL
    - gcloud storage cp --cache-control="public, max-age=3600" build/* $GCP_BUCKET_URL
